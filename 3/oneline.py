print([[[[[["p1: {}; p2: {}".format(sum ((part["value"]) for part in words if part["connect"] ), sum (([ratio[0] * ratio[1] for ratio in [list ((part["value"]) for part in words if g in part["connect"] )]][0]) for g,c in collections.Counter( (((x, y, c)) for part in words for x,y, c in part["connect"] if c == "*" ) ).items() if c == 2 )) for words in [list (([dict(word=word2,connect=set (((x+dx, y+dy, locs[x+dx, y+dy])) for dx in (-1,0,1) for dy in (-1,0,1) for (x,y) in word2 if (x+dx, y+dy) in partlocs ) , value=int(''.join( ((locs[x, y]) for (x,y) in word2 ) )) ) for word2 in [list(word)]][0]) for valid, word in itertools.groupby(itertools.chain(* (([(x1, y1)] if (x1==x2) and (y2-y1==1) else [(x1, y1), None]) for (x1, y1), (x2, y2) in zip(digitlocs, digitlocs[1:] + [(0,0)]) ) ), lambda v: v is not None) if valid )]][0] for partlocs in [set(locs.keys()) - set(digitlocs)]][0] for digitlocs in [list ((k) for k, v in locs.items() if v in '0123456789' )]][0] for locs in [dict ((((x,y), char)) for x,line in enumerate(open("input.txt")) for y,char in enumerate(line) if char != "." )]][0] for collections in [__import__("collections")]][0] for itertools in [__import__("itertools")]][0])